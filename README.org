#+title: Rails 7 Passkey Demo

* Introduction
:LOGBOOK:
CLOCK: [2022-11-14 Mon 08:00]--[2022-11-14 Mon 16:00] =>  8:00
:END:

All of this code was stolen from various places.  [[https://rubygems.org/gems/webauthn/versions/2.5.2][webauthn]] is a Ruby
gem which has a Rails 6.0.6 demo: [[https://github.com/cedarcode/webauthn-rails-demo-app][webauthn-rails-demo-app]].
[[https://github.com/github/webauthn-json][webauthn-json]] is also being used on the browser side.

What I've attempted to do is make a demo that uses passkeys and Rails
7 as stock as possible.  I'm using [[https://github.com/rails/importmap-rails][importmap-rails]] and
[[https://github.com/rails/tailwindcss-rails][tailwindcss-rails]] (although I don't claim *ANY* ability to design web
pages.

Also note that I am not good at writing tests.

* Basic Control Flow

There are two basic flows.  One path is for a new unregistered user
and the other path is for a previously registered user.

The database schema has a ~users~ table which has a ~has_many~
relationship to the ~credentials~ table.  The key piece of data is the
~public_key~ kept in the ~credentials~ table.

An unregistered user will be directed to the ~registration/new~ URL
where the registration ceremony will result in a new ~credential~
being created for the user with their public_key and other data.  The
final step is a call to ~sign_in(user)~ to store the new session that
has been created along the way.

A registered user will be directed to the ~session/new~ URL which
retrieves the users public key from their associated ~credentials~ and
performs the log in ceremony  and calls ~sign_in(user)~ assuming all
goes well.

~home/index~ is the root page for the application.  ~HomeController~
is a subclass of ~AuthenticatedController~ which has a ~before_action~
of ~enforce_current_user~.  Any unauthenticated user is redirected
to ~session/new~.  The ~session/new~ page has a link to
~registration/new~ for unregistered users.

* Added models and sessions controller
:LOGBOOK:
CLOCK: [2022-11-15 Tue 08:00]--[2022-11-15 Tue 16:00] =>  8:00
:END:

Added the user and credentials models and added the sessions
controller.  If you look the git commit is actually on the 16th.  This
is because the original repo I was working on got abandoned in the
process of figuring out the problems below.

* Problems and more problems
:LOGBOOK:
CLOCK: [2022-11-16 Wed 08:00]--[2022-11-16 Wed 16:00] =>  8:00
:END:
This is actually a new fresh repo.  With tailwindcss-rails, the start
up for development is to use bin/dev and it starts up the server and a
process to keep your CSS up to date.  The problem is that ~rails
tailwindcss:watch~ exists with a status of 0 where it is suppose to
watch for file system events.

I even tried adding a new ~css~ web service in the ~compose.yml~ file
but it had the same problem.  So, I am just starting the Rails server
in the web service and I'm doing ~rails tailwindcss:build~
periodically when my CSS needs to be updated.

I got a sample of a user login from the Tailwind site and tried to add
a ~form_with~ to it but I did:
#+BEGIN_SRC erb
<%= form_with .... do |form| %>
<%= end %>
#+END_SRC
The second line should be ~<% end %>~ without the equals (~=~) sign.
That wasted a day.

* Another day wasted
:LOGBOOK:
CLOCK: [2022-11-17 Thu 08:00]--[2022-11-17 Thu 16:00] =>  8:00
:END:
I'm groping around trying to understand Tailwind and I thought perhaps
adding Tailwind CSS IntelliSense might help.  This is done by getting
~lsp-mode~ to work for ~web-mode~ files (~erb~ files) and it is
suppose to give you completion suggestions, etc.

It is working slightly but I don't think it will be of any benefit.

I finally got back to mucking with the app itself.
